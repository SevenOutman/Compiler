/* parser generated by jison 0.4.15 */
/*
 Returns a Parser object of the following structure:

 Parser: {
 yy: {}
 }

 Parser.prototype: {
 yy: {},
 trace: function(),
 symbols_: {associative list: name ==> number},
 terminals_: {associative list: number ==> name},
 productions_: [...],
 performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
 table: [...],
 defaultActions: {...},
 parseError: function(str, hash),
 parse: function(input),

 lexer: {
 EOF: 1,
 parseError: function(str, hash),
 setInput: function(input),
 input: function(),
 unput: function(str),
 more: function(),
 less: function(n),
 pastInput: function(),
 upcomingInput: function(),
 showPosition: function(),
 test_match: function(regex_match_array, rule_index),
 next: function(),
 lex: function(),
 begin: function(condition),
 popState: function(),
 _currentRules: function(),
 topState: function(),
 pushState: function(condition),

 options: {
 ranges: boolean           (optional: true ==> token location info will include a .range[] member)
 flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
 backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
 },

 performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 rules: [...],
 conditions: {associative list: name ==> set},
 }
 }


 token location info (@$, _$, etc.): {
 first_line: n,
 last_line: n,
 first_column: n,
 last_column: n,
 range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
 }


 the parseError function receives a 'hash' object with these members for lexer and parser errors: {
 text:        (matched text)
 token:       (the produced terminal token, if any)
 line:        (yylineno)
 }
 while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
 loc:         (yylloc)
 expected:    (string describing the set of expected tokens)
 recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
 }
 */
var parser = (function() {
    var o  = function(k, v, o, l) {
        for (o = o || {}, l = k.length; l--; o[k[l]] = v);
        return o
    }, $V0 = [1, 4], $V1 = [2, 10], $V2 = [1, 14], $V3 = [1, 15], $V4 = [1, 16], $V5 = [1, 17], $V6 = [
        1,
        18
    ], $V7 = [11, 13, 14, 19, 20, 21, 27, 28], $V8 = [1, 22], $V9 = [1, 35], $Va = [1, 33], $Vb = [1, 34], $Vc = [
        17,
        24,
        31
    ], $Vd = [2, 24], $Ve = [1, 42], $Vf = [1, 43], $Vg = [17, 24, 31, 34, 35], $Vh = [2, 28], $Vi = [1, 45], $Vj = [
        1,
        46
    ], $Vk = [17, 24, 31, 34, 35, 38, 39];
    var parser = {
        trace:          function trace() {
        },
        yy:             {},
        symbols_:       {
            "error":          2,
            "program":        3,
            "compoundstmt":   4,
            "EOF":            5,
            "stmt":           6,
            "decl":           7,
            "ifstmt":         8,
            "whilestmt":      9,
            "assgstmt":       10,
            "{":              11,
            "stmts":          12,
            "}":              13,
            "if":             14,
            "(":              15,
            "boolexpr":       16,
            ")":              17,
            "then":           18,
            "else":           19,
            "while":          20,
            "ID":             21,
            "=":              22,
            "arithexpr":      23,
            ";":              24,
            "type":           25,
            "list":           26,
            "int":            27,
            "real":           28,
            "list1":          29,
            ",":              30,
            "boolop":         31,
            "multexpr":       32,
            "arithexprprime": 33,
            "+":              34,
            "-":              35,
            "simpleexpr":     36,
            "multexprprime":  37,
            "*":              38,
            "/":              39,
            "num":            40,
            "$accept":        0,
            "$end":           1
        },
        terminals_:     {
            2:  "error",
            5:  "EOF",
            11: "{",
            13: "}",
            14: "if",
            15: "(",
            17: ")",
            18: "then",
            19: "else",
            20: "while",
            21: "ID",
            22: "=",
            24: ";",
            27: "int",
            28: "real",
            30: ",",
            31: "boolop",
            34: "+",
            35: "-",
            38: "*",
            39: "/",
            40: "num"
        },
        productions_:   [
            0,
            [
                3,
                2
            ],
            [
                3,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                6,
                1
            ],
            [
                4,
                3
            ],
            [
                12,
                2
            ],
            [
                12,
                0
            ],
            [
                8,
                8
            ],
            [
                9,
                5
            ],
            [
                10,
                4
            ],
            [
                7,
                3
            ],
            [
                25,
                1
            ],
            [
                25,
                1
            ],
            [
                26,
                2
            ],
            [
                29,
                2
            ],
            [
                29,
                0
            ],
            [
                16,
                3
            ],
            [
                23,
                2
            ],
            [
                33,
                3
            ],
            [
                33,
                3
            ],
            [
                33,
                0
            ],
            [
                32,
                2
            ],
            [
                37,
                3
            ],
            [
                37,
                3
            ],
            [
                37,
                0
            ],
            [
                36,
                1
            ],
            [
                36,
                1
            ],
            [
                36,
                3
            ]
        ],
        performAction:  function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:

                    // console.log('symbolTable');
                    // console.log(symbolTable);
                    // console.log('variableTable:');
                    // console.log(variableTable);
                    // console.log('undeclaredVariableTable:');
                    // console.log(undeclaredVariableTable);
                    // for (undeclaredVariable in undeclaredVariableTable) {
                    //     console.log(undeclaredVariableTable[undeclaredVariable].name+' UNDECLARED VARIABLE.');
                    // }
                    // resetTables();
                    parser.parseTree = new Node([
                        'program',
                        $$[$0 - 1],
                        '$'
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);
                    return true;

                    break;
                case 2:

                    return new Node(['program', '$'], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:

                    this.$ = new Node(['stmt', $$[$0]], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 8:

                    this.$ = new Node([
                        'compoundstmt',
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 9:

                    this.$ = new Node(['stmts', $$[$0 - 1], $$[$0]], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 10:

                    this.$ = new Node(['stmts'], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 11:

                    this.$ = new Node([
                        'ifstms',
                        $$[$0 - 7],
                        $$[$0 - 6],
                        $$[$0 - 5],
                        $$[$0 - 4],
                        $$[$0 - 3],
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 12:

                    this.$ = new Node([
                        'whilestmt',
                        $$[$0 - 4],
                        $$[$0 - 3],
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 13:

                    this.$ = new Node([
                        'assgstmt',
                        $$[$0 - 3],
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 14:

                    this.$ = new Node([
                        'decl',
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 15:
                case 16:

                    this.$ = new Node(['type', $$[$0]], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 17:

                    this.$ = new Node([
                        'list',
                        new Node(['ID', $$[$0 - 1]]),
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 18:

                    this.$ = new Node(['list1', $$[$0 - 1], $$[$0]], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 19:

                    this.$ = new Node(['list1'], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 20:

                    this.$ = new Node([
                        'boolexpr',
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 21:

                    this.$ = new Node(['arithexpr', $$[$0 - 1], $$[$0]], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 22:
                case 23:

                    this.$ = new Node([
                        'arithexprprime',
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 24:

                    this.$ = new Node(['arithexprprime', this.$, yy.lexer.matched, yy.lexer.matches])

                    break;
                case 25:

                    this.$ = new Node(['multexpr', $$[$0 - 1], $$[$0]], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 26:
                case 27:

                    this.$ = new Node([
                        'multexprprime',
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 28:

                    this.$ = new Node(['multexprprime'], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 29:
                case 30:

                    this.$ = new Node(['simpleexpr', $$[$0]], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
                case 31:

                    this.$ = new Node([
                        'simpleexpr',
                        $$[$0 - 2],
                        $$[$0 - 1],
                        $$[$0]
                    ], this.$$, yy.lexer.matched, yy.lexer.matches);

                    break;
            }
        },
        table:          [
            {
                3:  1,
                4:  2,
                5:  [1, 3],
                11: $V0
            },
            {1: [3]},
            {5: [1, 5]},
            {1: [2, 2]},
            {
                4:  12,
                6:  7,
                7:  8,
                8:  9,
                9:  10,
                10: 11,
                11: $V0,
                12: 6,
                13: $V1,
                14: $V2,
                20: $V3,
                21: $V4,
                25: 13,
                27: $V5,
                28: $V6
            },
            {1: [2, 1]},
            {13: [1, 19]},
            {
                4:  12,
                6:  7,
                7:  8,
                8:  9,
                9:  10,
                10: 11,
                11: $V0,
                12: 20,
                13: $V1,
                14: $V2,
                20: $V3,
                21: $V4,
                25: 13,
                27: $V5,
                28: $V6
            },
            o($V7, [2, 3]),
            o($V7, [2, 4]),
            o($V7, [2, 5]),
            o($V7, [2, 6]),
            o($V7, [2, 7]),
            {
                21: $V8,
                26: 21
            },
            {15: [1, 23]},
            {15: [1, 24]},
            {22: [1, 25]},
            {21: [2, 15]},
            {21: [2, 16]},
            o([5, 11, 13, 14, 19, 20, 21, 27, 28], [2, 8]),
            {13: [2, 9]},
            {24: [1, 26]},
            {
                24: [2, 19],
                29: 27,
                30: [1, 28]
            },
            {
                15: $V9,
                16: 29,
                21: $Va,
                23: 30,
                32: 31,
                36: 32,
                40: $Vb
            },
            {
                15: $V9,
                16: 36,
                21: $Va,
                23: 30,
                32: 31,
                36: 32,
                40: $Vb
            },
            {
                15: $V9,
                21: $Va,
                23: 37,
                32: 31,
                36: 32,
                40: $Vb
            },
            o($V7, [2, 14]),
            {24: [2, 17]},
            {
                21: $V8,
                26: 38
            },
            {17: [1, 39]},
            {31: [1, 40]},
            o($Vc, $Vd, {33: 41, 34: $Ve, 35: $Vf}),
            o($Vg, $Vh, {37: 44, 38: $Vi, 39: $Vj}),
            o($Vk, [2, 29]),
            o($Vk, [2, 30]),
            {
                15: $V9,
                21: $Va,
                23: 47,
                32: 31,
                36: 32,
                40: $Vb
            },
            {17: [1, 48]},
            {24: [1, 49]},
            {24: [2, 18]},
            {18: [1, 50]},
            {
                15: $V9,
                21: $Va,
                23: 51,
                32: 31,
                36: 32,
                40: $Vb
            },
            o($Vc, [2, 21]),
            {
                15: $V9,
                21: $Va,
                32: 52,
                36: 32,
                40: $Vb
            },
            {
                15: $V9,
                21: $Va,
                32: 53,
                36: 32,
                40: $Vb
            },
            o($Vg, [2, 25]),
            {
                15: $V9,
                21: $Va,
                36: 54,
                40: $Vb
            },
            {
                15: $V9,
                21: $Va,
                36: 55,
                40: $Vb
            },
            {17: [1, 56]},
            {
                4:  12,
                6:  57,
                7:  8,
                8:  9,
                9:  10,
                10: 11,
                11: $V0,
                14: $V2,
                20: $V3,
                21: $V4,
                25: 13,
                27: $V5,
                28: $V6
            },
            o($V7, [2, 13]),
            {
                4:  12,
                6:  58,
                7:  8,
                8:  9,
                9:  10,
                10: 11,
                11: $V0,
                14: $V2,
                20: $V3,
                21: $V4,
                25: 13,
                27: $V5,
                28: $V6
            },
            {17: [2, 20]},
            o($Vc, $Vd, {33: 59, 34: $Ve, 35: $Vf}),
            o($Vc, $Vd, {33: 60, 34: $Ve, 35: $Vf}),
            o($Vg, $Vh, {37: 61, 38: $Vi, 39: $Vj}),
            o($Vg, $Vh, {37: 62, 38: $Vi, 39: $Vj}),
            o($Vk, [2, 31]),
            o($V7, [2, 12]),
            {19: [1, 63]},
            o($Vc, [2, 22]),
            o($Vc, [2, 23]),
            o($Vg, [2, 26]),
            o($Vg, [2, 27]),
            {
                4:  12,
                6:  64,
                7:  8,
                8:  9,
                9:  10,
                10: 11,
                11: $V0,
                14: $V2,
                20: $V3,
                21: $V4,
                25: 13,
                27: $V5,
                28: $V6
            },
            o($V7, [2, 11])
        ],
        defaultActions: {
            3:  [2, 2],
            5:  [2, 1],
            17: [2, 15],
            18: [2, 16],
            20: [2, 9],
            27: [2, 17],
            38: [2, 18],
            51: [2, 20]
        },
        parseError:     function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                }

                _parseError.prototype = new Error();

                throw new _parseError(str, hash);
            }
        },
        parse:          function parse(input) {
            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = {yy: {}};
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }

            _token_stack:
                var lex = function() {
                    var token;
                    token = lexer.lex() || EOF;
                    if (typeof token !== 'number') {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() +
                                 '\nExpecting ' + expected.join(', ') + ', got \'' +
                                 (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' +
                                 (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text:     lexer.match,
                        token:    this.terminals_[symbol] || symbol,
                        line:     lexer.yylineno,
                        loc:      yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line:   lstack[lstack.length - (len || 1)].first_line,
                            last_line:    lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column:  lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };


    // var Variable = function(name, type, value){
    //     this.name=name;
    //     this.type=type;
    //     this.value=value;
    // }
    // var VariableTable = function(){};
    // VariableTable.prototype = function () {
    //     haveVariable = function(varName) {
    //         for(i in this){
    //             if(this[i].name == varName){
    //                 return true;
    //             }
    //         }
    //         return false;
    //     }
    //     pushVariable = function(variable) {
    //         this[variable.name] = variable
    //     }
    //     return {
    //         haveVariable: haveVariable,
    //         pushVariable: pushVariable
    //     }
    // }();

    // var variableTable = new VariableTable();
    // var undeclaredVariableTable = new VariableTable();

    // resetVariableTable = function() {
    //     variableTable = new VariableTable();
    // }
    // resetUndeclaredVariableTable = function() {
    //     undeclaredVariableTable = new VariableTable();
    // }

    parser.progress = [];
    parser.resetProgress = function() {
        parser.progress = [];
    }
    parser.getProgress = function() {
        return parser.progress;
    }
    var SymbolTable = function() {
    };
    SymbolTable.prototype.contain = function(symbol) {
        for (s in this) {
            if (this[s].text == symbol.text) {
                return true;
            }
        }
        return false;
    }
    SymbolTable.prototype.copy = function() {
        st = new SymbolTable();
        for (s in this) {
            if (this[s] instanceof (Symbol)) {
                st[this[s].text] = new Symbol(this[s].text, this[s].type, this[s].positions)
            }
        }
        return st;
    }
    parser.symbolTable = new SymbolTable();
    parser.symbolTableBackup = new SymbolTable();

    var Symbol = function(text, type, position) {
        this.text = text
        this.type = type
        this.value = undefined
        this.positions = position instanceof (Array) ? position : [position]
        return this
    }
    parser.getParseTree = function() {
        //
        return this.parseTree;
    }
    parser.getSymbolTable = function() {
        return parser.symbolTable;
    }
    parser.backupSymbolTable = function() {
        parser.symbolTableBackup = parser.symbolTable.copy();
    }
    parser.restoreSymbolTable = function() {
        parser.symbolTable = parser.symbolTableBackup.copy();
    }
    parser.resetSymbolTable = function() {
        parser.symbolTable = new SymbolTable();
        parser.symbolTableBackup = new SymbolTable();
    }
    parser.resetTables = function() {
        parser.resetSymbolTable();
        // resetVariableTable();
        // resetUndeclaredVariableTable();
    }
    parser.foundSymbol = function(symbol) {
        // console.log(parser.symbolTable)
        if (parser.symbolTable.contain(symbol)) {
            parser.symbolTable[symbol.text].positions = parser.symbolTable[symbol.text].positions.concat(symbol.positions)
        } else {
            parser.symbolTable[symbol.text] = symbol
        }
    }

    var Node = function(args, stack/*$$*/, matchedInput/*yy.lexer.matched*/, remainingInput/*yy.lexer.matches*/) {
        parser.progress.push([stack, matchedInput, remainingInput])

        this.nodeName = args[0];
        this.subNodes = [];
        for (i = 1; i < args.length; i++) {
            this.subNodes.push(args[i])
        }
        return this
    }

    parser.generateSequentialNodes = function() {
        parser.countNode = 0;
        return parser.digNode(null, parser.parseTree);
    }

    parser.digNode = function(fartherID, node) {
        var thisID = parser.countNode++;
        if (node instanceof (Node)) {
            var sequentialNodes = [];
            var cur = [thisID, node.nodeName, 0, fartherID];
            var subNodes = node.subNodes;
            for (n in subNodes) {
                var subSqu = parser.digNode(thisID, subNodes[n]);
                for (i in subSqu) {
                    sequentialNodes.push(subSqu[i]);
                }
                cur[2] += subSqu[0][2] + 1;
            }
            sequentialNodes.unshift(cur)
            return sequentialNodes
        } else {
            var cur = [thisID, node, 0, fartherID];
            return [cur]
        }
    }

    // foundDeclaration = function (nodeType, nodeList) {
    //     return;
    //     type = nodeType.subNodes[0];
    //     node = nodeList;
    //     while (true) {
    //         varName = node.subNodes[0];
    //         if (!variableTable.haveVariable(varName)) {
    //             variableTable.pushVariable(new Variable(varName, type, undefined));
    //         } else {
    //             console.log('ALREADY DECLARED VARIABLE: '+varName);
    //         }
    //         node = node.subNodes[1]
    //         if (node.subNodes.length==0) {
    //             break;
    //         };
    //     }
    // }

    parser.lexOne = function(input, loc) {
        this.restoreSymbolTable();
        var tokens = [
            ["int", 'int'],
            ["real", 'real'],
            ["if", 'if'],
            ["then", 'then'],
            ["else", 'else'],
            ["while", 'while'],
            ["[a-zA-Z][a-zA-Z0-9]*", 'ID'],
            ["\\(", '('],
            ["\\)", ')'],
            ["\\{", '{'],
            ["\\}", '}'],
            ["\\;", ';'],
            ["\\+", '+'],
            ["\\-", '-'],
            ["\\*", '*'],
            ["\\/", '/'],
            ["<=", 'boolop'],
            ["<", 'boolop'],
            ["==", 'boolop'],
            [">=", 'boolop'],
            [">", 'boolop'],
            ["!=", 'boolop'],
            ["=", '='],
            ["[0-9]\\.[0-9]", 'num'],
            ["[0-9]", 'num']
        ]
        var symbol;
        for (i in tokens) {
            if (input.match(tokens[i][0])) {
                symbol = new Symbol(input, tokens[i][1], loc)
                parser.foundSymbol(symbol);
                break;
            }
        }
        return symbol;
    }
    parser._parse = function _parse(input) {
        parser.resetTables()
        parser.resetProgress();
        parsed = parser.parse(input);
        parser.backupSymbolTable();
        return parsed;
    }


    /* generated by jison-lex 0.3.4 */
    var lexer = (function() {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

// resets the lexer, sets new input
            setInput: function(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line:   1,
                    first_column: 0,
                    last_line:    1,
                    last_column:  0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

// consumes and returns one char from the input
            input: function() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

// unshifts one char (or a string) into the input
            unput: function(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line:   this.yylloc.first_line,
                    last_line:    this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column:  lines ?
                                  (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                                  + oldLines[oldLines.length - lines.length].length - lines[0].length :
                                  this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

// When called from action, caches matched text and appends it on next action
            more: function() {
                this._more = true;
                return this;
            },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) +
                                           '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' +
                                           this.showPosition(), {
                        text:  "",
                        token: null,
                        line:  this.yylineno
                    });

                }
                return this;
            },

// retain first n characters of the match
            less: function(n) {
                this.unput(this.match.slice(n));
            },

// displays already matched input, i.e. for error messages
            pastInput: function() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

// displays upcoming input, i.e. for error messages
            upcomingInput: function() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

// displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

// test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function(match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno:       this.yylineno,
                        yylloc:         {
                            first_line:   this.yylloc.first_line,
                            last_line:    this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column:  this.yylloc.last_column
                        },
                        yytext:         this.yytext,
                        match:          this.match,
                        matches:        this.matches,
                        matched:        this.matched,
                        yyleng:         this.yyleng,
                        offset:         this.offset,
                        _more:          this._more,
                        _input:         this._input,
                        yy:             this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done:           this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line:   this.yylloc.last_line,
                    last_line:    this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column:  lines ?
                                  lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                                  this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length -
                                                                                                       1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

// return next match in input
            next: function() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' +
                                           this.showPosition(), {
                        text:  "",
                        token: null,
                        line:  this.yylineno
                    });
                }
            },

// return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

// pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

// produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

// alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

// return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options:        {},
            performAction:  function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:/* skip whitespace */
                        break;
                    case 1:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'int', yy_.yylloc));
                        return 27;
                        break;
                    case 2:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'real', yy_.yylloc));
                        return 28;
                        break;
                    case 3:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'if', yy_.yylloc));
                        return 14;
                        break;
                    case 4:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'then', yy_.yylloc));
                        return 18;
                        break;
                    case 5:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'else', yy_.yylloc));
                        return 19;
                        break;
                    case 6:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'while', yy_.yylloc));
                        return 20;
                        break;
                    case 7:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'ID', yy_.yylloc));
                        return 21;
                        break;
                    case 8:
                        parser.foundSymbol(new Symbol(yy_.yytext, '(', yy_.yylloc));
                        return 15;
                        break;
                    case 9:
                        parser.foundSymbol(new Symbol(yy_.yytext, ')', yy_.yylloc));
                        return 17;
                        break;
                    case 10:
                        parser.foundSymbol(new Symbol(yy_.yytext, '{', yy_.yylloc));
                        return 11;
                        break;
                    case 11:
                        parser.foundSymbol(new Symbol(yy_.yytext, '}', yy_.yylloc));
                        return 13;
                        break;
                    case 12:
                        parser.foundSymbol(new Symbol(yy_.yytext, ';', yy_.yylloc));
                        return 24;
                        break;
                    case 13:
                        parser.foundSymbol(new Symbol(yy_.yytext, '+', yy_.yylloc));
                        return 34;
                        break;
                    case 14:
                        parser.foundSymbol(new Symbol(yy_.yytext, '-', yy_.yylloc));
                        return 35;
                        break;
                    case 15:
                        parser.foundSymbol(new Symbol(yy_.yytext, '*', yy_.yylloc));
                        return 38;
                        break;
                    case 16:
                        parser.foundSymbol(new Symbol(yy_.yytext, '/', yy_.yylloc));
                        return 39;
                        break;
                    case 17:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'boolop', yy_.yylloc));
                        return 31;
                        break;
                    case 18:
                        parser.foundSymbol(new Symbol(yy_.yytext, '=', yy_.yylloc));
                        return 22
                        break;
                    case 19:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'num', yy_.yylloc));
                        return 40;
                        break;
                    case 20:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'num', yy_.yylloc));
                        return 40;
                        break;
                    case 21:
                        parser.foundSymbol(new Symbol(yy_.yytext, 'EOF', yy_.yylloc));
                        return 5;
                        break;
                    case 22:
                        throw  'UNDEFINED SYMBOL AT ' + yy_.yylloc.first_line + ', ' + yy_.yylloc.first_column;
                        break;
                }
            },
            rules:          [
                /^(?:\s+)/,
                /^(?:int\b)/,
                /^(?:real\b)/,
                /^(?:if\b)/,
                /^(?:then\b)/,
                /^(?:else\b)/,
                /^(?:while\b)/,
                /^(?:[a-zA-Z][a-zA-Z0-9]*)/,
                /^(?:\()/,
                /^(?:\))/,
                /^(?:\{)/,
                /^(?:\})/,
                /^(?:;)/,
                /^(?:\+)/,
                /^(?:-)/,
                /^(?:\*)/,
                /^(?:\/)/,
                /^(?:<=|<|==|>=|>|!=)/,
                /^(?:=)/,
                /^(?:(([0-9])+)\.(([0-9])+))/,
                /^(?:(([0-9])+))/,
                /^(?:$)/,
                /^(?:.*)/
            ],
            conditions:     {
                "INITIAL": {
                    "rules":        [
                        0,
                        1,
                        2,
                        3,
                        4,
                        5,
                        6,
                        7,
                        8,
                        9,
                        10,
                        11,
                        12,
                        13,
                        14,
                        15,
                        16,
                        17,
                        18,
                        19,
                        20,
                        21,
                        22
                    ], "inclusive": true
                }
            }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }

    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function() {
        return parser.parse.apply(parser, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}